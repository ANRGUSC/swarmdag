// Code generated by protoc-gen-go. DO NOT EDIT.
// source: report.proto

package monitor

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReportEventReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportEventReply) Reset()         { *m = ReportEventReply{} }
func (m *ReportEventReply) String() string { return proto.CompactTextString(m) }
func (*ReportEventReply) ProtoMessage()    {}
func (*ReportEventReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eedb623aa6ca98c, []int{0}
}

func (m *ReportEventReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportEventReply.Unmarshal(m, b)
}
func (m *ReportEventReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportEventReply.Marshal(b, m, deterministic)
}
func (m *ReportEventReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportEventReply.Merge(m, src)
}
func (m *ReportEventReply) XXX_Size() int {
	return xxx_messageInfo_ReportEventReply.Size(m)
}
func (m *ReportEventReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportEventReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReportEventReply proto.InternalMessageInfo

func (m *ReportEventReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ReportEventReq struct {
	InfluxdbURL          string   `protobuf:"bytes,1,opt,name=influxdbURL,proto3" json:"influxdbURL,omitempty"`
	NodeID               string   `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	MembershipID         string   `protobuf:"bytes,3,opt,name=membershipID,proto3" json:"membershipID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportEventReq) Reset()         { *m = ReportEventReq{} }
func (m *ReportEventReq) String() string { return proto.CompactTextString(m) }
func (*ReportEventReq) ProtoMessage()    {}
func (*ReportEventReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eedb623aa6ca98c, []int{1}
}

func (m *ReportEventReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportEventReq.Unmarshal(m, b)
}
func (m *ReportEventReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportEventReq.Marshal(b, m, deterministic)
}
func (m *ReportEventReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportEventReq.Merge(m, src)
}
func (m *ReportEventReq) XXX_Size() int {
	return xxx_messageInfo_ReportEventReq.Size(m)
}
func (m *ReportEventReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportEventReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReportEventReq proto.InternalMessageInfo

func (m *ReportEventReq) GetInfluxdbURL() string {
	if m != nil {
		return m.InfluxdbURL
	}
	return ""
}

func (m *ReportEventReq) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *ReportEventReq) GetMembershipID() string {
	if m != nil {
		return m.MembershipID
	}
	return ""
}

func init() {
	proto.RegisterType((*ReportEventReply)(nil), "monitor.ReportEventReply")
	proto.RegisterType((*ReportEventReq)(nil), "monitor.ReportEventReq")
}

func init() { proto.RegisterFile("report.proto", fileDescriptor_3eedb623aa6ca98c) }

var fileDescriptor_3eedb623aa6ca98c = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4a, 0x2d, 0xc8,
	0x2f, 0x2a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcf, 0xcd, 0xcf, 0xcb, 0x2c, 0xc9,
	0x2f, 0x52, 0xd2, 0xe1, 0x12, 0x08, 0x02, 0x4b, 0xb8, 0x96, 0xa5, 0xe6, 0x95, 0x04, 0xa5, 0x16,
	0xe4, 0x54, 0x0a, 0x49, 0x70, 0xb1, 0x17, 0x97, 0x26, 0x27, 0xa7, 0x16, 0x17, 0x4b, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x04, 0xc1, 0xb8, 0x4a, 0x79, 0x5c, 0x7c, 0x28, 0xaa, 0x0b, 0x85, 0x14, 0xb8,
	0xb8, 0x33, 0xf3, 0xd2, 0x72, 0x4a, 0x2b, 0x52, 0x92, 0x42, 0x83, 0x7c, 0xc0, 0xea, 0x39, 0x83,
	0x90, 0x85, 0x84, 0xc4, 0xb8, 0xd8, 0xf2, 0xf2, 0x53, 0x52, 0x3d, 0x5d, 0x24, 0x98, 0xc0, 0x92,
	0x50, 0x9e, 0x90, 0x12, 0x17, 0x4f, 0x6e, 0x6a, 0x6e, 0x52, 0x6a, 0x51, 0x71, 0x46, 0x66, 0x81,
	0xa7, 0x8b, 0x04, 0x33, 0x58, 0x16, 0x45, 0xcc, 0xc8, 0x9f, 0x8b, 0x03, 0x62, 0x5f, 0x6a, 0x91,
	0x90, 0x33, 0x17, 0x37, 0x92, 0xdd, 0x42, 0xe2, 0x7a, 0x50, 0x2f, 0xe8, 0xa1, 0xba, 0x48, 0x4a,
	0x12, 0xbb, 0x44, 0x41, 0x4e, 0xa5, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0xfb, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x5c, 0x07, 0x56, 0xb0, 0x0e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReporterClient is the client API for Reporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReporterClient interface {
	ReportEvent(ctx context.Context, in *ReportEventReq, opts ...grpc.CallOption) (*ReportEventReply, error)
}

type reporterClient struct {
	cc *grpc.ClientConn
}

func NewReporterClient(cc *grpc.ClientConn) ReporterClient {
	return &reporterClient{cc}
}

func (c *reporterClient) ReportEvent(ctx context.Context, in *ReportEventReq, opts ...grpc.CallOption) (*ReportEventReply, error) {
	out := new(ReportEventReply)
	err := c.cc.Invoke(ctx, "/monitor.Reporter/ReportEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReporterServer is the server API for Reporter service.
type ReporterServer interface {
	ReportEvent(context.Context, *ReportEventReq) (*ReportEventReply, error)
}

// UnimplementedReporterServer can be embedded to have forward compatible implementations.
type UnimplementedReporterServer struct {
}

func (*UnimplementedReporterServer) ReportEvent(ctx context.Context, req *ReportEventReq) (*ReportEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportEvent not implemented")
}

func RegisterReporterServer(s *grpc.Server, srv ReporterServer) {
	s.RegisterService(&_Reporter_serviceDesc, srv)
}

func _Reporter_ReportEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServer).ReportEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitor.Reporter/ReportEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServer).ReportEvent(ctx, req.(*ReportEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reporter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monitor.Reporter",
	HandlerType: (*ReporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportEvent",
			Handler:    _Reporter_ReportEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "report.proto",
}
